<?php
header('Content-Type: application/json; charset=utf-8');
header('Access-Control-Allow-Origin: *');

if (validate_request()) {
    // Continue processing the request, since it's valid
    echo "Request is valid. Proceeding to data validation...";
    $username = trim($_POST['username']);
    $dob = trim($_POST['dateOfBirth']);
    $temporaryPassword = generateTemporaryPassword($username, $dob);
    echo json_encode(['password' => $temporaryPassword]);
}

function send_error($code, $message) {

    $responses = [
        400 => "Bad Request",
        404 => "Not Found",
        405 => "Method Not Allowed",
        500 => "Internal server error"
    ];

    // Get the server protocol (e.g., HTTP/1.1)
    $protocol = $_SERVER['SERVER_PROTOCOL'];

    // Set the response code in the HTTP header
    header("$protocol $code " . $responses[$code]);

    // Return the error message in the response body
    echo json_encode([
        "error" => $message,
        "code" => $code
    ]);

    // exit the code immediately
    exit;
}

function validate_request() {
    // Validate that the request is a POST request
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        send_error(405, "Only POST requests are allowed");
    }

    // Validate that POST data is not empty
    if (empty($_POST)) {
        send_error(400, "Request body is empty");
    }

    // Validate that all required fields are present
    $required_fields = ['username', 'fullName', 'dateOfBirth', 'email'];

    foreach ($required_fields as $field) {
        if (!isset($_POST[$field]) || empty(trim($_POST[$field]))) {
            send_error(400, "Missing or empty field: $field. All fields need to be entered.");
        }
    }

    // Validate username
    $username = trim($_POST['username']);
    // the regex for username check has been generated by AI (ChatGPT)

    if (!preg_match('/^(?=.*[A-Z])(?=.*\d)(?=.*[~!@#$%^&*])[A-Za-z\d~!@#$%^&*]{8,20}$/', $username)) {
        send_error(400, "Bad request: Invalid username format.");
    }

    // Validate full name
    $fullname = trim($_POST['fullname']);
    if (!preg_match('/^[a-zA-Z\'-]+\s[a-zA-Z\'-]+$/', $fullname)) {
        send_error(400, "Bad Request: Invalid full name format.");
    }

    // Validate date of birth
    $dob = trim($_POST['dateOfBirth']);
    // Check if the date is in the correct format and a valid date
    $dateParts = explode('-', $dob);
    if (count($dateParts) !== 3) {
        send_error(400, "Bad request: Invalid date of birth format.");
    }

    list($year, $month, $day) = $dateParts;

    // Check if the date is valid using checkdate()
    if(!checkdate($month, $day, $year)) {
        send_error(400, "Bad request: Invalid date of birth value.");
    }

    // Validate email
    $email = trim($_POST['email']);
    // regex used for email validation is provided by the assignment instructions pdf
    if (!preg_match('/^[a-zA-Z-]([\w-.]+)?@([\w-]+\.)+[\w]+$/', $email)) {
        send_error(400, "Bad Request: Invalid email format.");
    }

    // If all validations pass`, return true
    return true;
}

// generate temporary password using username, pet names list, and user's age
function generateTemporaryPassword($username, $dateOfBirth) {
    // List of pet names
    $petNames = ["snowball", "disco", "jester", "sandwiches", "dasher", "toffee", "tigerlilly", "mushu", "solemnbum", "spats", "bluey", "wonda"];

    // Select a random pet name
    $petName = $petNames[array_rand($petNames)];

    // Shuffle the characters of the username
    $shuffledUsername = str_shuffle($username);

    // Calculate the user's age from their date of birth
    $dobParts = explode('-', $dateOfBirth);
    list($year, $month, $day) = $dobParts;

    // calculate user's age = current year - year value in DOB
    $age = date('Y') - $year;
    if (date('md') < $month . $day) {
        $age--; // subtract 1 year from age if the birthday has not occurred yet this year
    }

    // Construct the temporary password
    $password = $petName . $shuffledUsername . $age;

    return $password;
}




